#this is all of the code 

#RE-STRUCTURE ALL VARIABLES
import math
import calendar
import webbrowser
from datetime import datetime, timedelta

dt = datetime.now()
td = timedelta(days=4)
my_date = dt + td

print('''Welcome to SaraTainin Savings Calculator!
Before we get started, please enter some general financial information.''')
goal = float(input("Savings goal: "))
current = float(input("Current amount: "))
minc = float(input("Recent paycheck: ")) * 2
monthly_cont = minc * .4

#basic calculator function
def basic():
    print("Welcome to basic calculator")
    rem = goal - current 
    time = round(rem / monthly_cont)
    if time > 12:
        print("You should reach your goal in about ", end='')
        print(round(time / 12, 0),"years!")
    elif int(time <= 12):
        num = int(time)
        print("You should reach your goal by",calendar.month_name[num])

    print("You have to save ", rem,",", "which is", monthly_cont, "each month")

def adv():
    print("Welcome to advanced")
    trate = float(input("Rough Tax Rate: ")) 
    insurance = float(input("Monthly insurance: "))
    avgliv = float(input("Enter an rough total of gas, food, entertainment, and subscriptions: "))
    debt_cont = float(input("Average debt contribution: "))

    #FIXED ADVANCED VARIABLES TO ALIGN WITH BASIC VARIABLES TO SIMPLIFY CODE. LEFT OFF AT MCONT
    #does math for remaining and monthly savings 

    rem = goal - current 
    ptax = round(minc * trate, 2) 
    after_exp = ptax - insurance - avgliv - debt_cont
    monthly_cont = round(after_exp / 2, 2)
    timetil = round(rem / monthly_cont, 0)

    #prints if the goal is achievable during the same month or if it's years (UNFINISHED)
    if timetil > 12:
        print("You should reach your goal in about ", end='')
        print(round(timetil / 12, 0),"years!")
    else:
        num = int(timetil)
        print("You should reach your goal ", calendar.month_name[num])

    print("You have to save ",rem,",", "which is",monthly_cont,"each month") 

#NOT FINAL WEBSITES USED. FOR TESTING ONLY
def gentip():
    print("""
    Welcome to the general savings tips and tricks guide!
          
                [1] - cutting costs 
                [2] - rule of thumb
                [3] - return to previous menu
          """)
    gtaction = input("Please select an option: ")
    if gtaction == '1':
        webbrowser.open("https://www.truist.com/money-mindset/principles/budgeting-by-values/reducing-your-expenses")
    elif gtaction == '2':
        webbrowser.open("https://www.tiaa.org/public/learn/personal-finance-101/how-much-of-my-income-should-i-save-every-month#:~:text=mean%20saving%20longer.-,At%20least%2020%25%20of%20your%20income%20should%20go%20towards%20savings,you%20to%20budget%20your%20money.")

#Menu Portion of the Code, May be Scrapped!
def main():
    print("""
    Please pick one of the 4 options!

        [1] - Basic Calculator
        [2] - Advanced Calculator
        [3] - General Tips
        [4] - Exit
            """)

    action = input("what would you like to do?: ")
    if action == '1':
        print("Directing you to Basic Calculator")
        basic()
    elif action == '2':
        print("Directing you to Advanced Calculator")
        adv()
    elif action == '3':
        print("Directing you to General Tips")
        gentip()
    elif action == '4':
        print("Goodbye!")

#Beginning to Build out the Calculator
root = tk.Tk()

root.geometry("500x900")
root.title("SaraTainin Savings Calculator")

label = tk.Label(root, text="SaraTainin", font=('Times New Roman', 18))
label.pack(padx=20, pady=20)

textbox = tk.Text(root, height=5, font=('Times New Roman', 15))
textbox.pack(padx=20)

button_frame = tk.Frame(root)
button_frame.columnconfigure(0, weight=1)
button_frame.columnconfigure(1, weight=1)
button_frame.columnconfigure(2, weight=1)

btnbas = tk.Button(button_frame, text='Basic', font= ('Times New Roman', 15))
btnbas.grid(row=0, column=0, sticky="news")

btnadv = tk.Button(button_frame, text='Advanced', font= ('Times New Roman', 15))
btnadv.grid(row=0, column=1, sticky="news")

btntip = tk.Button(button_frame, text='Tips', font= ('Times New Roman', 15))
btntip.grid(row=0, column=2, sticky="news")

btn7 = tk.Button(button_frame, text='7', font= ('Times New Roman', 15))
btn7.grid(row=1, column=0, sticky="news")

btn8 = tk.Button(button_frame, text='8', font= ('Times New Roman', 15))
btn8.grid(row=1, column=1, sticky="news")

btn9 = tk.Button(button_frame, text='9', font= ('Times New Roman', 15))
btn9.grid(row=1, column=2, sticky="news")

btn4 = tk.Button(button_frame, text='4', font= ('Times New Roman', 15))
btn4.grid(row=2, column=0, sticky="news")

btn5 = tk.Button(button_frame, text='5', font= ('Times New Roman', 15))
btn5.grid(row=2, column=1, sticky="news")

btn6 = tk.Button(button_frame, text='6', font= ('Times New Roman', 15))
btn6.grid(row=2, column=2, sticky="news")

btn3 = tk.Button(button_frame, text='3', font= ('Times New Roman', 15))
btn3.grid(row=3, column=2, sticky="news")

btn2 = tk.Button(button_frame, text='2', font= ('Times New Roman', 15))
btn2.grid(row=3, column=1, sticky="news")

btn1 = tk.Button(button_frame, text='1', font= ('Times New Roman', 15))
btn1.grid(row=3, column=0, sticky="news")

button_frame.pack(fill='x')

root.mainloop()
