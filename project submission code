
#RE-STRUCTURE ALL VARIABLES
import math
import calendar
import webbrowser
from datetime import datetime, timedelta
from tkinter import *
from tkinter import messagebox

dt = datetime.now()
td = timedelta(days=4)
my_date = dt + td


#Beginning to Build the Calculator 
#Need to implement the functions and have the output show on the GUI 

class calculate():

    def __init__(self):
        self.root = Tk()
        self.root.title("Saratainin Savings Calculator")
        self.root.geometry("300x400")
        self.root.maxsize(300, 400)
        self.root.minsize(300, 400)
        self.root.config(bg="light pink")
        self.resultwindow = Entry(self.root, borderwidth=5, relief=SUNKEN)
        self.resultwindow.grid(ipadx = 15, ipady = 45,row=0, column=0,columnspan=5)
        self.resultwindow.config(font=("Times New Roman", 18))
        self.resultwindow.focus_set()  
        
        # BUTTONS
        
        self.button1 = Button(self.root, text="1", width=3, command=lambda:self.ins('1'),relief=RIDGE,bg='light green')
        self.button1.grid(row=1,column=0, padx=6, pady=6)
        self.button1.config(font=("Times New Roman", 18))

        self.button2 = Button(self.root, text="2", width=3, command=lambda:self.ins('2'),relief=RIDGE,bg='light green')
        self.button2.grid(row=1, column=1, padx=3, pady=3)
        self.button2.config(font=("Times New Roman", 18))

        self.button3 = Button(self.root, text="3", width=3, command=lambda:self.ins('3'),relief=RIDGE,bg='light green')
        self.button3.grid(row=1, column=2, padx=3, pady=3)
        self.button3.config(font=("Times New Roman", 18))

        bas_button = Button(self.root, text="Basic", width=3, command=self.calculate_bas,relief=RIDGE,bg='light blue')
        bas_button.grid(row=5, column=0, padx=3, pady=3, sticky="nsew")
        bas_button.config(font=("Times New Roman",12))

        adv_button = Button(self.root, text="Adv", width=3, command=self.calculate_advanced,relief=RIDGE,bg='light blue')
        adv_button.grid(row=5, column=1, padx=3, pady=3, sticky="nsew")
        adv_button.config(font=("Times New Roman",12))

        gentip_button = Button(self.root, text="Tips", width=3, command=self.calculate_gentip,relief=RIDGE,bg='light blue')
        gentip_button.grid(row=5, column=2, padx=3, pady=3, sticky="nsew")
        gentip_button.config(font=("Times New Roman",12))

        self.saratainin = Button(self.root, text="SaraTainin", width=7, command=self.popup,relief=RIDGE,bg='light blue')
        self.saratainin.grid(row=5, column=3, ipadx=18, padx=3, pady=3, columnspan=2)
        self.saratainin.config(font=("Times New Roman", 12))

        self.button4 = Button(self.root, text="4", width=3, command=lambda:self.ins('4'),relief=RIDGE,bg='light green')
        self.button4.grid(row=2, column=0, padx=3, pady=3)
        self.button4.config(font=("Times New Roman", 18))

        self.button5 = Button(self.root, text="5", width=3, command=lambda:self.ins('5'),relief=RIDGE,bg='light green')
        self.button5.grid(row=2, column=1, padx=3, pady=3)
        self.button5.config(font=("Times New Roman", 18))

        self.button6 = Button(self.root, text="6", width=3, command=lambda:self.ins('6'),relief=RIDGE,bg='light green')
        self.button6.grid(row=2, column=2, padx=3, pady=3)
        self.button6.config(font=("Times New Roman", 18))

        self.button7 = Button(self.root, text="7", width=3, command=lambda:self.ins('7'),relief=RIDGE,bg='light green')
        self.button7.grid(row=3, column=0, padx=3, pady=3)
        self.button7.config(font=("Times New Roman", 18))

        self.button8 = Button(self.root, text="8", width=3, command=lambda:self.ins('8'),relief=RIDGE,bg='light green')
        self.button8.grid(row=3, column=1, padx=3, pady=3)
        self.button8.config(font=("Times New Roman", 18))

        self.button9 = Button(self.root, text="9", width=3, command=lambda:self.ins('9'),relief=RIDGE,bg='light green')
        self.button9.grid(row=3, column=2, padx=3, pady=3)
        self.button9.config(font=("Times New Roman", 18))

        self.button0 = Button(self.root, text="0", width=3, command=lambda: self.ins('0'),relief=RIDGE,bg='light green')
        self.button0.grid(row=4, column=0, padx=3, pady=3)
        self.button0.config(font=("Times New Roman", 18))

        self.button_open = Button(self.root, text="(", width=3, command=lambda: self.ins('('),relief=RIDGE)
        self.button_open.grid(row=4, column=1, padx=3, pady=3)
        self.button_open.config(font=("Times New Roman", 18))

        self.button_close = Button(self.root, text=")", width=3, command=lambda: self.ins(')'),relief=RIDGE)
        self.button_close.grid(row=4, column=2, padx=3, pady=3)
        self.button_close.config(font=("Times New Roman", 18))

        #SIGNS/OPERATIONS/BUTTONS 
        self.buttonplus = Button(self.root, text="+", width=3, command=lambda:self.ins('+'),relief=RIDGE)
        self.buttonplus.grid(row=1, column=3, padx=3, pady=3)
        self.buttonplus.config(font=("Times New Roman", 18))

        self.buttonminus = Button(self.root, text="-", width=3, command=lambda:self.ins('-'),relief=RIDGE)
        self.buttonminus.grid(row=1, column=4, padx=3, pady=3)
        self.buttonminus.config(font=("Times New Roman", 18))

        self.buttondivide = Button(self.root, text="/", width=3, command=lambda:self.ins('/'),relief=RIDGE)
        self.buttondivide.grid(row=2, column=3, padx=3, pady=3)
        self.buttondivide.config(font=("Times New Roman", 18))

        self.buttonmultiply = Button(self.root, text="*", width=3, command=lambda:self.ins('*'),relief=RIDGE)
        self.buttonmultiply.grid(row=2, column=4, padx=3, pady=3)
        self.buttonmultiply.config(font=("Times New Roman", 18))

        self.buttoncancel = Button(self.root, text="C", width=3, command=lambda: self.cancel(),relief=RIDGE,bg='#EF5350',fg='white')
        self.buttoncancel.grid(row=3, column=4, padx=3, pady=3)
        self.buttoncancel.config(font=("Times New Roman", 18))

        self.buttondeleteall = Button(self.root, text="Del", width=3, command=lambda: self.delete_all(),relief=RIDGE)
        self.buttondeleteall.grid(row=3, column=3, padx=3, pady=3)
        self.buttondeleteall.config(font=("Times New Roman", 18))

        self.buttonresult = Button(self.root, text="=", width=7, command=lambda:self.calculate(),relief=RIDGE,bg='#FFEE58')
        self.buttonresult.grid(row=4, column=3, padx=3, pady=3, columnspan=2)
        self.buttonresult.config(font=("Times New Roman", 18))

        self.root.mainloop()
        

    def calculate_bas(self):
       
        print("Welcome to basic calculator")
        print("Before we get started, please enter some general financial information.")
        goal = float(input("Savings Goal: "))
        current = float(input("Current amount: "))
        minc = float(input("Recent paycheck: ")) * 2
        monthly_cont = minc * .4
        rem = round(goal - current,2)
        time = round(rem / monthly_cont,2)
        if time > 12:
            print("You should reach your goal in about ", end='')
            print(round(time / 12, 0))
        elif int(time <= 12):
            num = int(time)
            print("you should reach your goal in",calendar.month_name[num])

        print("You have to save ", rem,",", "which is", monthly_cont, "each month")
        
        reroute = "Basic Calculator Redirect: look to terminal"
        self.resultwindow.delete(0, "end")  
        self.resultwindow.insert(0, reroute)

    def calculate_advanced(self):
        print("Welcome to advanced")
        print("Before we get started, please enter some general financial information.")
        goal = float(input("Savings goal: "))
        current = float(input("Current amount: "))
        minc = float(input("Recent paycheck: ")) * 2
        monthly_cont = minc * .4
        trate = float(input("Rough Tax Rate: ")) 
        insurance = float(input("Monthly insurance: "))
        avgliv = float(input("Enter an rough total of gas, food, entertainment, and subscriptions: "))
        debt_cont = float(input("Average debt contribution: "))
        rem = goal - current 
        ptax = round(minc * trate, 2) 
        after_exp = ptax - insurance - avgliv - debt_cont
        monthly_cont = round(after_exp / 2, 2)
        timetil = round(rem / monthly_cont, 0)

        #prints if the goal is achievable during the same month or if it's years
        if timetil > 12:
            print("You should reach your goal in about ", end='')
            print(round(timetil / 12, 0),"years!")
        else:
            num = int(timetil)
            print("You should reach your goal ", calendar.month_name[num])

        print("You have to save ",rem,",", "which is",monthly_cont,"each month")
        reroute = "Advanced Calculator Redirect: look to terminal"
        self.resultwindow.delete(0, "end")  
        self.resultwindow.insert(0, reroute)

    def calculate_gentip(self):
        print("""Welcome to the general savings tips and tricks guide!  
        [1] - cutting costs 
        [2] - rule of thumb
            """)
        gtaction = input("Please select an option: ")
        if gtaction == '1':
            webbrowser.open("https://www.truist.com/money-mindset/principles/budgeting-by-values/reducing-your-expenses")
        elif gtaction == '2':
            webbrowser.open("https://www.tiaa.org/public/learn/personal-finance-101/how-much-of-my-income-should-i-save-every-month#:~:text=mean%20saving%20longer.-,At%20least%2020%25%20of%20your%20income%20should%20go%20towards%20savings,you%20to%20budget%20your%20money.")

            result = "You've Been Redirected to Tips: look to terminal"
            self.resultwindow.delete(0, "end")  
            self.resultwindow.insert(0, result)

    def ins(self,val):
        self.resultwindow.insert(END, val)

    def cancel(self):
        self.resultwindow.delete(0, 'end')

    def delete_all(self):
        x = self.resultwindow.get()
        self.resultwindow.delete(0, 'end')
        y = x[:-1]
        self.resultwindow.insert(0, y)

    def calculate(self):
        x = self.resultwindow.get()
        answer = eval(x)
        self.resultwindow.delete(0, 'end')
        self.resultwindow.insert(0, answer)

    def popup(self):
        messagebox.showinfo("About","This is a program targeted towards low income head of houseolds and college students. However, anyone is more than welcome to use it. For more info visit our github! https://github.com/ksu-is/Savings_Budgeting")
    
    
if __name__ == "__main__":
    calculate()
